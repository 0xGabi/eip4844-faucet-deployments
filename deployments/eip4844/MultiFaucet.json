{
  "address": "0x04F1e772E19234aCF03A8A9BC72d0308AAaFEB07",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_DAI",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_URI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "FaucetDrained",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "FaucetDripped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "OperatorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "SuperOperatorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DAI",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAI_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ETH_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NFT_COUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "URI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedOperators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableDrips",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ethDrips",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "daiDrips",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wethDrips",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "drain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "drip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftsMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "superOperators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "updateApprovedOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nftCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ethAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_daiAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_wethAmount",
          "type": "uint256"
        }
      ],
      "name": "updateDripAmounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "updateSuperOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_URI",
          "type": "string"
        }
      ],
      "name": "updateTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe95fc52f9208c245eafa9742a151ff671813d3f014b07c718d0c223f3d0a434f",
  "receipt": {
    "to": null,
    "from": "0xCc9333861BAa9716Fe18b4a71fc1DB73CCA00a21",
    "contractAddress": "0x04F1e772E19234aCF03A8A9BC72d0308AAaFEB07",
    "transactionIndex": 0,
    "gasUsed": "2450765",
    "logsBloom": "0x
    "blockHash": "0xfc138a7240c90a51dfcd3213e361509127a8958c491785ff6f1a013ed92518a1",
    "transactionHash": "0xe95fc52f9208c245eafa9742a151ff671813d3f014b07c718d0c223f3d0a434f",
    "logs": [],
    "blockNumber": 5475,
    "cumulativeGasUsed": "2450765",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xac6e29F8DF22Ebbd22CB089f52558760F3ba4247",
    "0x0bD9060153E7CA86341E9B7D53df2bc0eC51B985",
    "https://ipfs.io/ipfs/bafybeie5sae57x3nchd5ua3tgser6y5cg6jifiauaz2pjgx5hyd5c7z3pu"
  ],
  "numDeployments": 2,
  "solcInputHash": "82926d691ae913fccede2e2b59a180e6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_DAI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_URI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"FaucetDrained\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"FaucetDripped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"OperatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SuperOperatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFT_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"URI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedOperators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableDrips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethDrips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daiDrips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wethDrips\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"drain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"drip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftsMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"superOperators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateApprovedOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wethAmount\",\"type\":\"uint256\"}],\"name\":\"updateDripAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateSuperOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_URI\",\"type\":\"string\"}],\"name\":\"updateTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Anish Agnihotri\",\"events\":{\"FaucetDrained(address)\":{\"params\":{\"recipient\":\"address drained to\"}},\"FaucetDripped(address)\":{\"params\":{\"recipient\":\"address dripped to\"}},\"OperatorUpdated(address,bool)\":{\"params\":{\"operator\":\"address being updated\",\"status\":\"new operator status\"}},\"SuperOperatorUpdated(address,bool)\":{\"params\":{\"operator\":\"address being updated\",\"status\":\"new operator status\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"availableDrips()\":{\"returns\":{\"daiDrips\":\"\\u2014 available DAI drips\",\"ethDrips\":\"\\u2014 available Ether drips\",\"wethDrips\":\"\\u2014 available wETH drips\"}},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"params\":{\"_DAI\":\"address of DAI contract\",\"_URI\":\"string of token URI\",\"_WETH\":\"address of wETH contract\"}},\"drain(address)\":{\"params\":{\"_recipient\":\"to send drained tokens to\"}},\"drip(address)\":{\"params\":{\"_recipient\":\"to drip tokens to\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"of ERC721 NFT\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"updateApprovedOperator(address,bool)\":{\"params\":{\"_operator\":\"address to update\",\"_status\":\"of operator to toggle (true == allowed to drip)\"}},\"updateDripAmounts(uint256,uint256,uint256,uint256)\":{\"params\":{\"_daiAmount\":\"DAI to drip\",\"_ethAmount\":\"ETH to drip\",\"_nftCount\":\"number of NFTs to mint per drip\",\"_wethAmount\":\"wETH to drip\"}},\"updateSuperOperator(address,bool)\":{\"params\":{\"_operator\":\"address to update\",\"_status\":\"of operator to toggle (true === is super operator)\"}},\"updateTokenURI(string)\":{\"params\":{\"_URI\":\"of collection\"}}},\"title\":\"MultiFaucet\",\"version\":1},\"userdoc\":{\"events\":{\"FaucetDrained(address)\":{\"notice\":\"Emitted after faucet drained to a recipient\"},\"FaucetDripped(address)\":{\"notice\":\"Emitted after faucet drips to a recipient\"},\"OperatorUpdated(address,bool)\":{\"notice\":\"Emitted after operator status is updated\"},\"SuperOperatorUpdated(address,bool)\":{\"notice\":\"Emitted after super operator is updated\"}},\"kind\":\"user\",\"methods\":{\"DAI()\":{\"notice\":\"DAI ERC20 token\"},\"DAI_AMOUNT()\":{\"notice\":\"DAI to disperse\"},\"ETH_AMOUNT()\":{\"notice\":\"ETH to disperse\"},\"NFT_COUNT()\":{\"notice\":\"Number of ERC721 NFTs to mint\"},\"URI()\":{\"notice\":\"Default NFT uri\"},\"WETH()\":{\"notice\":\"wETH ERC20 token\"},\"WETH_AMOUNT()\":{\"notice\":\"wETH to disperse\"},\"approvedOperators(address)\":{\"notice\":\"Addresses of approved operators\"},\"availableDrips()\":{\"notice\":\"Returns number of available drips by token\"},\"constructor\":{\"notice\":\"Creates a new MultiFaucet contract\"},\"drain(address)\":{\"notice\":\"Allows super operator to drain contract of tokens\"},\"drip(address)\":{\"notice\":\"Drips and mints tokens to recipient\"},\"nftsMinted()\":{\"notice\":\"Count of minted NFTs\"},\"superOperators(address)\":{\"notice\":\"Addresses of super operators\"},\"tokenURI(uint256)\":{\"notice\":\"Override internal ERC721 function to return single image per NFT\"},\"updateApprovedOperator(address,bool)\":{\"notice\":\"Allows super operator to update approved drip operator status\"},\"updateDripAmounts(uint256,uint256,uint256,uint256)\":{\"notice\":\"Allows super operator to update drip amounts\"},\"updateSuperOperator(address,bool)\":{\"notice\":\"Allows super operator to update super operator\"},\"updateTokenURI(string)\":{\"notice\":\"Allows super operator to update NFT uri\"}},\"notice\":\"Drips ETH, DAI, wETH, and mints NFTs\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MultiFaucet.sol\":\"MultiFaucet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/MultiFaucet.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/// ============ Imports ============\\n\\nimport \\\"./interfaces/IERC20.sol\\\"; // ERC20 minified interface\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\"; // OZ: ERC721\\n\\n/// @title MultiFaucet\\n/// @author Anish Agnihotri\\n/// @notice Drips ETH, DAI, wETH, and mints NFTs\\ncontract MultiFaucet is ERC721 {\\n\\n    /// ============ Immutable storage ============\\n\\n    /// @notice DAI ERC20 token\\n    IERC20 public immutable DAI;\\n    /// @notice wETH ERC20 token\\n    IERC20 public immutable WETH;\\n\\n    /// ============ Mutable storage ============\\n\\n    /// @notice Default NFT uri\\n    string public URI;\\n    /// @notice Count of minted NFTs\\n    uint256 public nftsMinted;\\n    /// @notice Number of ERC721 NFTs to mint\\n    uint256 public NFT_COUNT = 5;\\n    /// @notice ETH to disperse\\n    uint256 public ETH_AMOUNT = 5e17;\\n    /// @notice DAI to disperse\\n    uint256 public DAI_AMOUNT = 5_000e18;\\n    /// @notice wETH to disperse\\n    uint256 public WETH_AMOUNT = 5e17;\\n    /// @notice Addresses of approved operators\\n    mapping(address => bool) public approvedOperators;\\n    /// @notice Addresses of super operators\\n    mapping(address => bool) public superOperators;\\n\\n    /// ============ Modifiers ============\\n\\n    /// @notice Requires sender to be contract super operator\\n    modifier isSuperOperator() {\\n        // Ensure sender is super operator\\n        require(superOperators[msg.sender], \\\"Not super operator\\\");\\n        _;\\n    }\\n\\n    /// @notice Requires sender to be contract approved operator\\n    modifier isApprovedOperator() {\\n        // Ensure sender is in approved operators or is super operator\\n        require(\\n            approvedOperators[msg.sender] || superOperators[msg.sender], \\n            \\\"Not approved operator\\\"\\n        );\\n        _;\\n    }\\n\\n    /// ============ Events ============\\n\\n    /// @notice Emitted after faucet drips to a recipient\\n    /// @param recipient address dripped to\\n    event FaucetDripped(address indexed recipient);\\n\\n    /// @notice Emitted after faucet drained to a recipient\\n    /// @param recipient address drained to\\n    event FaucetDrained(address indexed recipient);\\n\\n    /// @notice Emitted after operator status is updated\\n    /// @param operator address being updated\\n    /// @param status new operator status\\n    event OperatorUpdated(address indexed operator, bool status);\\n\\n    /// @notice Emitted after super operator is updated\\n    /// @param operator address being updated\\n    /// @param status new operator status\\n    event SuperOperatorUpdated(address indexed operator, bool status);\\n\\n    /// ============ Constructor ============\\n\\n    /// @notice Creates a new MultiFaucet contract\\n    /// @param _DAI address of DAI contract\\n    /// @param _WETH address of wETH contract\\n    /// @param _URI string of token URI\\n    constructor(address _DAI, address _WETH, string memory _URI) \\n        ERC721(\\\"MultiFaucet NFT\\\", \\\"MFNFT\\\") \\n    {\\n        DAI = IERC20(_DAI);\\n        WETH = IERC20(_WETH);\\n        URI = _URI;\\n        superOperators[msg.sender] = true;\\n    }\\n\\n    /// ============ Functions ============\\n\\n    /// @notice Drips and mints tokens to recipient\\n    /// @param _recipient to drip tokens to\\n    function drip(address _recipient) external isApprovedOperator {\\n        // Drip Ether\\n        (bool sent,) = _recipient.call{value: ETH_AMOUNT}(\\\"\\\");\\n        require(sent, \\\"Failed dripping ETH\\\");\\n\\n        // Drip DAI\\n        require(DAI.transfer(_recipient, DAI_AMOUNT), \\\"Failed dripping DAI\\\");\\n\\n        // Drip wETH\\n        require(WETH.transfer(_recipient, WETH_AMOUNT), \\\"Failed dripping wETH\\\");\\n\\n        // Mint NFTs\\n        for (uint256 i = 1; i <= NFT_COUNT; i++) {\\n            _mint(_recipient, nftsMinted + i);\\n        }\\n        nftsMinted += NFT_COUNT;\\n\\n        emit FaucetDripped(_recipient);\\n    }\\n\\n    /// @notice Returns number of available drips by token\\n    /// @return ethDrips \\u2014 available Ether drips\\n    /// @return daiDrips \\u2014 available DAI drips\\n    /// @return wethDrips \\u2014 available wETH drips\\n    function availableDrips() public view \\n        returns (uint256 ethDrips, uint256 daiDrips, uint256 wethDrips) \\n    {\\n        ethDrips = address(this).balance / ETH_AMOUNT;\\n        daiDrips = DAI.balanceOf(address(this)) / DAI_AMOUNT;\\n        wethDrips = WETH.balanceOf(address(this)) / WETH_AMOUNT;\\n    }\\n\\n    /// @notice Allows super operator to drain contract of tokens\\n    /// @param _recipient to send drained tokens to\\n    function drain(address _recipient) external isSuperOperator {\\n        // Drain all Ether\\n        (bool sent,) = _recipient.call{value: address(this).balance}(\\\"\\\");\\n        require(sent, \\\"Failed draining ETH\\\");\\n\\n        // Drain all DAI\\n        uint256 daiBalance = DAI.balanceOf(address(this));\\n        require(DAI.transfer(_recipient, daiBalance), \\\"Failed draining DAI\\\");\\n\\n        // Drain all wETH\\n        uint256 wethBalance = WETH.balanceOf(address(this));\\n        require(WETH.transfer(_recipient, wethBalance), \\\"Failed dripping wETH\\\");\\n\\n        emit FaucetDrained(_recipient);\\n    }\\n\\n    /// @notice Allows super operator to update approved drip operator status\\n    /// @param _operator address to update\\n    /// @param _status of operator to toggle (true == allowed to drip)\\n    function updateApprovedOperator(address _operator, bool _status) \\n        external \\n        isSuperOperator \\n    {\\n        approvedOperators[_operator] = _status;\\n        emit OperatorUpdated(_operator, _status);\\n    }\\n\\n    /// @notice Allows super operator to update super operator\\n    /// @param _operator address to update\\n    /// @param _status of operator to toggle (true === is super operator)\\n    function updateSuperOperator(address _operator, bool _status) \\n        external\\n        isSuperOperator\\n    {\\n        superOperators[_operator] = _status;\\n        emit SuperOperatorUpdated(_operator, _status);\\n    }\\n\\n    /// @notice Override internal ERC721 function to return single image per NFT\\n    /// @param tokenId of ERC721 NFT\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        // OpenZeppelin check: ensure token exists\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n        return URI;\\n    }\\n\\n    /// @notice Allows super operator to update NFT uri\\n    /// @param _URI of collection\\n    function updateTokenURI(string memory _URI) external isSuperOperator {\\n        URI = _URI;\\n    }\\n\\n    /// @notice Allows super operator to update drip amounts\\n    /// @param _nftCount number of NFTs to mint per drip\\n    /// @param _ethAmount ETH to drip\\n    /// @param _daiAmount DAI to drip\\n    /// @param _wethAmount wETH to drip\\n    function updateDripAmounts(\\n        uint256 _nftCount, \\n        uint256 _ethAmount,\\n        uint256 _daiAmount,\\n        uint256 _wethAmount\\n    ) external isSuperOperator {\\n        NFT_COUNT = _nftCount;\\n        ETH_AMOUNT = _ethAmount;\\n        DAI_AMOUNT = _daiAmount;\\n        WETH_AMOUNT = _wethAmount;\\n    }\\n\\n    /// @notice Allows receiving ETH\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x50b9555be81348b4bf2b949e2b5a8a2863326463b37dfe1f495eece84ff527dc\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n  /// @notice ERC0 transfer tokens\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n  /// @notice ERC20 balance of address\\n  function balanceOf(address account) external view returns (uint256);\\n}\",\"keccak256\":\"0xc47f74f2af10d960192414e2952c605076ba776107abdb7dee9bf5ac1488897f\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60c060405260056008556706f05b59d3b2000060095569010f0cf064dd59200000600a556706f05b59d3b20000600b553480156200003c57600080fd5b5060405162002ac638038062002ac68339810160408190526200005f9162000141565b6040518060400160405280600f81526020016e135d5b1d1a51985d58d95d08139195608a1b81525060405180604001604052806005815260200164135193919560da1b8152508160009081620000b69190620002ca565b506001620000c58282620002ca565b5050506001600160a01b03808416608052821660a0526006620000e98282620002ca565b5050336000908152600d60205260409020805460ff1916600117905550620003969050565b80516001600160a01b03811681146200012657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156200015757600080fd5b62000162846200010e565b92506020620001738186016200010e565b60408601519093506001600160401b03808211156200019157600080fd5b818701915087601f830112620001a657600080fd5b815181811115620001bb57620001bb6200012b565b604051601f8201601f19908116603f01168101908382118183101715620001e657620001e66200012b565b816040528281528a86848701011115620001ff57600080fd5b600093505b8284101562000223578484018601518185018701529285019262000204565b60008684830101528096505050505050509250925092565b600181811c908216806200025057607f821691505b6020821081036200027157634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002c557600081815260208120601f850160051c81016020861015620002a05750805b601f850160051c820191505b81811015620002c157828155600101620002ac565b5050505b505050565b81516001600160401b03811115620002e657620002e66200012b565b620002fe81620002f784546200023b565b8462000277565b602080601f8311600181146200033657600084156200031d5750858301515b600019600386901b1c1916600185901b178555620002c1565b600085815260208120601f198616915b82811015620003675788860151825594840194600190910190840162000346565b5085821015620003865787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a0516126d2620003f4600039600081816104b001528181610aec01528181610e1201528181611696015261173201526000818161055a01528181610a5301528181610d2d0152818161152701526115c301526126d26000f3fe6080604052600436106101d15760003560e01c8063929398f5116100f7578063b88d4fde11610095578063e0bab4c411610064578063e0bab4c414610548578063e985e9c51461057c578063ece53132146105c5578063ff721aba146105e557600080fd5b8063b88d4fde146104d2578063c14033ba146104f2578063c87b56dd14610508578063d370169d1461052857600080fd5b80639d4944c8116100d15780639d4944c81461042e5780639f40c9a71461044e578063a22cb4651461047e578063ad5c46481461049e57600080fd5b8063929398f5146103e357806395d89b41146103f957806398cd61531461040e57600080fd5b806342842e0e1161016f5780636e99fddf1161013e5780636e99fddf1461037757806370a082311461038d57806377caec8d146103ad57806383464e22146103cd57600080fd5b806342842e0e146102f357806360df19e0146103135780636352211e1461033757806367a5cd061461035757600080fd5b8063095ea7b3116101ab578063095ea7b31461026c5780631141d7de1461028e57806323b872dd146102a357806324cf0771146102c357600080fd5b806301ffc9a7146101dd57806306fdde0314610212578063081812fc1461023457600080fd5b366101d857005b600080fd5b3480156101e957600080fd5b506101fd6101f836600461211f565b610615565b60405190151581526020015b60405180910390f35b34801561021e57600080fd5b506102276106fa565b6040516102099190612189565b34801561024057600080fd5b5061025461024f36600461219c565b61078c565b6040516001600160a01b039091168152602001610209565b34801561027857600080fd5b5061028c6102873660046121d1565b6107b3565b005b34801561029a57600080fd5b50610227610907565b3480156102af57600080fd5b5061028c6102be3660046121fb565b610995565b3480156102cf57600080fd5b506102d8610a1c565b60408051938452602084019290925290820152606001610209565b3480156102ff57600080fd5b5061028c61030e3660046121fb565b610b68565b34801561031f57600080fd5b5061032960075481565b604051908152602001610209565b34801561034357600080fd5b5061025461035236600461219c565b610b83565b34801561036357600080fd5b5061028c610372366004612237565b610be8565b34801561038357600080fd5b5061032960085481565b34801561039957600080fd5b506103296103a8366004612237565b610f54565b3480156103b957600080fd5b5061028c6103c8366004612260565b610fee565b3480156103d957600080fd5b50610329600b5481565b3480156103ef57600080fd5b50610329600a5481565b34801561040557600080fd5b506102276110ad565b34801561041a57600080fd5b5061028c610429366004612323565b6110bc565b34801561043a57600080fd5b5061028c61044936600461236c565b61112b565b34801561045a57600080fd5b506101fd610469366004612237565b600d6020526000908152604090205460ff1681565b34801561048a57600080fd5b5061028c610499366004612260565b61119e565b3480156104aa57600080fd5b506102547f000000000000000000000000000000000000000000000000000000000000000081565b3480156104de57600080fd5b5061028c6104ed36600461239e565b6111a9565b3480156104fe57600080fd5b5061032960095481565b34801561051457600080fd5b5061022761052336600461219c565b611237565b34801561053457600080fd5b5061028c610543366004612260565b611356565b34801561055457600080fd5b506102547f000000000000000000000000000000000000000000000000000000000000000081565b34801561058857600080fd5b506101fd61059736600461241a565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156105d157600080fd5b5061028c6105e0366004612237565b61140d565b3480156105f157600080fd5b506101fd610600366004612237565b600c6020526000908152604090205460ff1681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd0000000000000000000000000000000000000000000000000000000014806106a857507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806106f457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060600080546107099061244d565b80601f01602080910402602001604051908101604052809291908181526020018280546107359061244d565b80156107825780601f1061075757610100808354040283529160200191610782565b820191906000526020600020905b81548152906001019060200180831161076557829003601f168201915b5050505050905090565b600061079782611827565b506000908152600460205260409020546001600160a01b031690565b60006107be82610b83565b9050806001600160a01b0316836001600160a01b03160361084c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b038216148061088657506001600160a01b038116600090815260056020908152604080832033845290915290205460ff165b6108f85760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610843565b610902838361188e565b505050565b600680546109149061244d565b80601f01602080910402602001604051908101604052809291908181526020018280546109409061244d565b801561098d5780601f106109625761010080835404028352916020019161098d565b820191906000526020600020905b81548152906001019060200180831161097057829003601f168201915b505050505081565b61099f3382611909565b610a115760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610843565b610902838383611988565b600080600060095447610a2f919061249d565b600a546040516370a0823160e01b8152306004820152919450906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610a9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abe91906124bf565b610ac8919061249d565b600b546040516370a0823160e01b8152306004820152919350906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5791906124bf565b610b61919061249d565b9050909192565b610902838383604051806020016040528060008152506111a9565b6000818152600260205260408120546001600160a01b0316806106f45760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610843565b336000908152600c602052604090205460ff1680610c155750336000908152600d602052604090205460ff165b610c615760405162461bcd60e51b815260206004820152601560248201527f4e6f7420617070726f766564206f70657261746f7200000000000000000000006044820152606401610843565b6009546040516000916001600160a01b038416918381818185875af1925050503d8060008114610cad576040519150601f19603f3d011682016040523d82523d6000602084013e610cb2565b606091505b5050905080610d035760405162461bcd60e51b815260206004820152601360248201527f4661696c6564206472697070696e6720455448000000000000000000000000006044820152606401610843565b600a5460405163a9059cbb60e01b81526001600160a01b03848116600483015260248201929092527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af1158015610d78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9c91906124d8565b610de85760405162461bcd60e51b815260206004820152601360248201527f4661696c6564206472697070696e6720444149000000000000000000000000006044820152606401610843565b600b5460405163a9059cbb60e01b81526001600160a01b03848116600483015260248201929092527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af1158015610e5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8191906124d8565b610ecd5760405162461bcd60e51b815260206004820152601460248201527f4661696c6564206472697070696e6720774554480000000000000000000000006044820152606401610843565b60015b6008548111610f0257610ef08382600754610eeb91906124f5565b611bcb565b80610efa81612508565b915050610ed0565b5060085460076000828254610f1791906124f5565b90915550506040516001600160a01b038316907f15b77122e87b6c2a7a9afcd86d718fe489828e6fd4d686aef3b823179ab04dbf90600090a25050565b60006001600160a01b038216610fd25760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610843565b506001600160a01b031660009081526003602052604090205490565b336000908152600d602052604090205460ff1661104d5760405162461bcd60e51b815260206004820152601260248201527f4e6f74207375706572206f70657261746f7200000000000000000000000000006044820152606401610843565b6001600160a01b0382166000818152600c6020908152604091829020805460ff191685151590811790915591519182527f966c160e1c4dbc7df8d69af4ace01e9297c3cf016397b7914971f2fbfa32672d91015b60405180910390a25050565b6060600180546107099061244d565b336000908152600d602052604090205460ff1661111b5760405162461bcd60e51b815260206004820152601260248201527f4e6f74207375706572206f70657261746f7200000000000000000000000000006044820152606401610843565b60066111278282612570565b5050565b336000908152600d602052604090205460ff1661118a5760405162461bcd60e51b815260206004820152601260248201527f4e6f74207375706572206f70657261746f7200000000000000000000000000006044820152606401610843565b600893909355600991909155600a55600b55565b611127338383611d71565b6111b33383611909565b6112255760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610843565b61123184848484611e3f565b50505050565b6000818152600260205260409020546060906001600160a01b03166112c45760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610843565b600680546112d19061244d565b80601f01602080910402602001604051908101604052809291908181526020018280546112fd9061244d565b801561134a5780601f1061131f5761010080835404028352916020019161134a565b820191906000526020600020905b81548152906001019060200180831161132d57829003601f168201915b50505050509050919050565b336000908152600d602052604090205460ff166113b55760405162461bcd60e51b815260206004820152601260248201527f4e6f74207375706572206f70657261746f7200000000000000000000000000006044820152606401610843565b6001600160a01b0382166000818152600d6020908152604091829020805460ff191685151590811790915591519182527f16b3641b846fa469157c01910687996a0318a9c2159e882502ed4d838d593c4291016110a1565b336000908152600d602052604090205460ff1661146c5760405162461bcd60e51b815260206004820152601260248201527f4e6f74207375706572206f70657261746f7200000000000000000000000000006044820152606401610843565b6000816001600160a01b03164760405160006040518083038185875af1925050503d80600081146114b9576040519150601f19603f3d011682016040523d82523d6000602084013e6114be565b606091505b505090508061150f5760405162461bcd60e51b815260206004820152601360248201527f4661696c656420647261696e696e6720455448000000000000000000000000006044820152606401610843565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611576573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159a91906124bf565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018390529192507f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af115801561160e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163291906124d8565b61167e5760405162461bcd60e51b815260206004820152601360248201527f4661696c656420647261696e696e6720444149000000000000000000000000006044820152606401610843565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156116e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170991906124bf565b60405163a9059cbb60e01b81526001600160a01b038681166004830152602482018390529192507f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af115801561177d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a191906124d8565b6117ed5760405162461bcd60e51b815260206004820152601460248201527f4661696c6564206472697070696e6720774554480000000000000000000000006044820152606401610843565b6040516001600160a01b038516907f7c8fc2d32492ea30dc289f81f32ebd6e1bcb12644f56039a3a274a924decc4a190600090a250505050565b6000818152600260205260409020546001600160a01b031661188b5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610843565b50565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03841690811790915581906118d082610b83565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061191583610b83565b9050806001600160a01b0316846001600160a01b0316148061195c57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806119805750836001600160a01b03166119758461078c565b6001600160a01b0316145b949350505050565b826001600160a01b031661199b82610b83565b6001600160a01b031614611a175760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610843565b6001600160a01b038216611a925760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610843565b611a9f8383836001611ec8565b826001600160a01b0316611ab282610b83565b6001600160a01b031614611b2e5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610843565b6000818152600460209081526040808320805473ffffffffffffffffffffffffffffffffffffffff199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216611c215760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610843565b6000818152600260205260409020546001600160a01b031615611c865760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610843565b611c94600083836001611ec8565b6000818152600260205260409020546001600160a01b031615611cf95760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610843565b6001600160a01b0382166000818152600360209081526040808320805460010190558483526002909152808220805473ffffffffffffffffffffffffffffffffffffffff19168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b816001600160a01b0316836001600160a01b031603611dd25760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610843565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611e4a848484611988565b611e5684848484611f50565b6112315760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610843565b6001811115611231576001600160a01b03841615611f0e576001600160a01b03841660009081526003602052604081208054839290611f08908490612630565b90915550505b6001600160a01b03831615611231576001600160a01b03831660009081526003602052604081208054839290611f459084906124f5565b909155505050505050565b60006001600160a01b0384163b156120e6576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290611fad903390899088908890600401612643565b6020604051808303816000875af1925050508015611fe8575060408051601f3d908101601f19168201909252611fe59181019061267f565b60015b61209b573d808015612016576040519150601f19603f3d011682016040523d82523d6000602084013e61201b565b606091505b5080516000036120935760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610843565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050611980565b506001949350505050565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461188b57600080fd5b60006020828403121561213157600080fd5b813561213c816120f1565b9392505050565b6000815180845260005b818110156121695760208185018101518683018201520161214d565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061213c6020830184612143565b6000602082840312156121ae57600080fd5b5035919050565b80356001600160a01b03811681146121cc57600080fd5b919050565b600080604083850312156121e457600080fd5b6121ed836121b5565b946020939093013593505050565b60008060006060848603121561221057600080fd5b612219846121b5565b9250612227602085016121b5565b9150604084013590509250925092565b60006020828403121561224957600080fd5b61213c826121b5565b801515811461188b57600080fd5b6000806040838503121561227357600080fd5b61227c836121b5565b9150602083013561228c81612252565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156122c8576122c8612297565b604051601f8501601f19908116603f011681019082821181831017156122f0576122f0612297565b8160405280935085815286868601111561230957600080fd5b858560208301376000602087830101525050509392505050565b60006020828403121561233557600080fd5b813567ffffffffffffffff81111561234c57600080fd5b8201601f8101841361235d57600080fd5b611980848235602084016122ad565b6000806000806080858703121561238257600080fd5b5050823594602084013594506040840135936060013592509050565b600080600080608085870312156123b457600080fd5b6123bd856121b5565b93506123cb602086016121b5565b925060408501359150606085013567ffffffffffffffff8111156123ee57600080fd5b8501601f810187136123ff57600080fd5b61240e878235602084016122ad565b91505092959194509250565b6000806040838503121561242d57600080fd5b612436836121b5565b9150612444602084016121b5565b90509250929050565b600181811c9082168061246157607f821691505b60208210810361248157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000826124ba57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156124d157600080fd5b5051919050565b6000602082840312156124ea57600080fd5b815161213c81612252565b808201808211156106f4576106f4612487565b6000600019820361251b5761251b612487565b5060010190565b601f82111561090257600081815260208120601f850160051c810160208610156125495750805b601f850160051c820191505b8181101561256857828155600101612555565b505050505050565b815167ffffffffffffffff81111561258a5761258a612297565b61259e81612598845461244d565b84612522565b602080601f8311600181146125d357600084156125bb5750858301515b600019600386901b1c1916600185901b178555612568565b600085815260208120601f198616915b82811015612602578886015182559484019460019091019084016125e3565b50858210156126205787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b818103818111156106f4576106f4612487565b60006001600160a01b038087168352808616602084015250836040830152608060608301526126756080830184612143565b9695505050505050565b60006020828403121561269157600080fd5b815161213c816120f156fea264697066735822122019239e1dfe70d9c2a94a255c44b0553220fdf344a7b45b058498cb756300228964736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101d15760003560e01c8063929398f5116100f7578063b88d4fde11610095578063e0bab4c411610064578063e0bab4c414610548578063e985e9c51461057c578063ece53132146105c5578063ff721aba146105e557600080fd5b8063b88d4fde146104d2578063c14033ba146104f2578063c87b56dd14610508578063d370169d1461052857600080fd5b80639d4944c8116100d15780639d4944c81461042e5780639f40c9a71461044e578063a22cb4651461047e578063ad5c46481461049e57600080fd5b8063929398f5146103e357806395d89b41146103f957806398cd61531461040e57600080fd5b806342842e0e1161016f5780636e99fddf1161013e5780636e99fddf1461037757806370a082311461038d57806377caec8d146103ad57806383464e22146103cd57600080fd5b806342842e0e146102f357806360df19e0146103135780636352211e1461033757806367a5cd061461035757600080fd5b8063095ea7b3116101ab578063095ea7b31461026c5780631141d7de1461028e57806323b872dd146102a357806324cf0771146102c357600080fd5b806301ffc9a7146101dd57806306fdde0314610212578063081812fc1461023457600080fd5b366101d857005b600080fd5b3480156101e957600080fd5b506101fd6101f836600461211f565b610615565b60405190151581526020015b60405180910390f35b34801561021e57600080fd5b506102276106fa565b6040516102099190612189565b34801561024057600080fd5b5061025461024f36600461219c565b61078c565b6040516001600160a01b039091168152602001610209565b34801561027857600080fd5b5061028c6102873660046121d1565b6107b3565b005b34801561029a57600080fd5b50610227610907565b3480156102af57600080fd5b5061028c6102be3660046121fb565b610995565b3480156102cf57600080fd5b506102d8610a1c565b60408051938452602084019290925290820152606001610209565b3480156102ff57600080fd5b5061028c61030e3660046121fb565b610b68565b34801561031f57600080fd5b5061032960075481565b604051908152602001610209565b34801561034357600080fd5b5061025461035236600461219c565b610b83565b34801561036357600080fd5b5061028c610372366004612237565b610be8565b34801561038357600080fd5b5061032960085481565b34801561039957600080fd5b506103296103a8366004612237565b610f54565b3480156103b957600080fd5b5061028c6103c8366004612260565b610fee565b3480156103d957600080fd5b50610329600b5481565b3480156103ef57600080fd5b50610329600a5481565b34801561040557600080fd5b506102276110ad565b34801561041a57600080fd5b5061028c610429366004612323565b6110bc565b34801561043a57600080fd5b5061028c61044936600461236c565b61112b565b34801561045a57600080fd5b506101fd610469366004612237565b600d6020526000908152604090205460ff1681565b34801561048a57600080fd5b5061028c610499366004612260565b61119e565b3480156104aa57600080fd5b506102547f000000000000000000000000000000000000000000000000000000000000000081565b3480156104de57600080fd5b5061028c6104ed36600461239e565b6111a9565b3480156104fe57600080fd5b5061032960095481565b34801561051457600080fd5b5061022761052336600461219c565b611237565b34801561053457600080fd5b5061028c610543366004612260565b611356565b34801561055457600080fd5b506102547f000000000000000000000000000000000000000000000000000000000000000081565b34801561058857600080fd5b506101fd61059736600461241a565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156105d157600080fd5b5061028c6105e0366004612237565b61140d565b3480156105f157600080fd5b506101fd610600366004612237565b600c6020526000908152604090205460ff1681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd0000000000000000000000000000000000000000000000000000000014806106a857507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806106f457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060600080546107099061244d565b80601f01602080910402602001604051908101604052809291908181526020018280546107359061244d565b80156107825780601f1061075757610100808354040283529160200191610782565b820191906000526020600020905b81548152906001019060200180831161076557829003601f168201915b5050505050905090565b600061079782611827565b506000908152600460205260409020546001600160a01b031690565b60006107be82610b83565b9050806001600160a01b0316836001600160a01b03160361084c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b038216148061088657506001600160a01b038116600090815260056020908152604080832033845290915290205460ff165b6108f85760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610843565b610902838361188e565b505050565b600680546109149061244d565b80601f01602080910402602001604051908101604052809291908181526020018280546109409061244d565b801561098d5780601f106109625761010080835404028352916020019161098d565b820191906000526020600020905b81548152906001019060200180831161097057829003601f168201915b505050505081565b61099f3382611909565b610a115760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610843565b610902838383611988565b600080600060095447610a2f919061249d565b600a546040516370a0823160e01b8152306004820152919450906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610a9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abe91906124bf565b610ac8919061249d565b600b546040516370a0823160e01b8152306004820152919350906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5791906124bf565b610b61919061249d565b9050909192565b610902838383604051806020016040528060008152506111a9565b6000818152600260205260408120546001600160a01b0316806106f45760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610843565b336000908152600c602052604090205460ff1680610c155750336000908152600d602052604090205460ff165b610c615760405162461bcd60e51b815260206004820152601560248201527f4e6f7420617070726f766564206f70657261746f7200000000000000000000006044820152606401610843565b6009546040516000916001600160a01b038416918381818185875af1925050503d8060008114610cad576040519150601f19603f3d011682016040523d82523d6000602084013e610cb2565b606091505b5050905080610d035760405162461bcd60e51b815260206004820152601360248201527f4661696c6564206472697070696e6720455448000000000000000000000000006044820152606401610843565b600a5460405163a9059cbb60e01b81526001600160a01b03848116600483015260248201929092527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af1158015610d78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9c91906124d8565b610de85760405162461bcd60e51b815260206004820152601360248201527f4661696c6564206472697070696e6720444149000000000000000000000000006044820152606401610843565b600b5460405163a9059cbb60e01b81526001600160a01b03848116600483015260248201929092527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af1158015610e5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8191906124d8565b610ecd5760405162461bcd60e51b815260206004820152601460248201527f4661696c6564206472697070696e6720774554480000000000000000000000006044820152606401610843565b60015b6008548111610f0257610ef08382600754610eeb91906124f5565b611bcb565b80610efa81612508565b915050610ed0565b5060085460076000828254610f1791906124f5565b90915550506040516001600160a01b038316907f15b77122e87b6c2a7a9afcd86d718fe489828e6fd4d686aef3b823179ab04dbf90600090a25050565b60006001600160a01b038216610fd25760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610843565b506001600160a01b031660009081526003602052604090205490565b336000908152600d602052604090205460ff1661104d5760405162461bcd60e51b815260206004820152601260248201527f4e6f74207375706572206f70657261746f7200000000000000000000000000006044820152606401610843565b6001600160a01b0382166000818152600c6020908152604091829020805460ff191685151590811790915591519182527f966c160e1c4dbc7df8d69af4ace01e9297c3cf016397b7914971f2fbfa32672d91015b60405180910390a25050565b6060600180546107099061244d565b336000908152600d602052604090205460ff1661111b5760405162461bcd60e51b815260206004820152601260248201527f4e6f74207375706572206f70657261746f7200000000000000000000000000006044820152606401610843565b60066111278282612570565b5050565b336000908152600d602052604090205460ff1661118a5760405162461bcd60e51b815260206004820152601260248201527f4e6f74207375706572206f70657261746f7200000000000000000000000000006044820152606401610843565b600893909355600991909155600a55600b55565b611127338383611d71565b6111b33383611909565b6112255760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610843565b61123184848484611e3f565b50505050565b6000818152600260205260409020546060906001600160a01b03166112c45760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610843565b600680546112d19061244d565b80601f01602080910402602001604051908101604052809291908181526020018280546112fd9061244d565b801561134a5780601f1061131f5761010080835404028352916020019161134a565b820191906000526020600020905b81548152906001019060200180831161132d57829003601f168201915b50505050509050919050565b336000908152600d602052604090205460ff166113b55760405162461bcd60e51b815260206004820152601260248201527f4e6f74207375706572206f70657261746f7200000000000000000000000000006044820152606401610843565b6001600160a01b0382166000818152600d6020908152604091829020805460ff191685151590811790915591519182527f16b3641b846fa469157c01910687996a0318a9c2159e882502ed4d838d593c4291016110a1565b336000908152600d602052604090205460ff1661146c5760405162461bcd60e51b815260206004820152601260248201527f4e6f74207375706572206f70657261746f7200000000000000000000000000006044820152606401610843565b6000816001600160a01b03164760405160006040518083038185875af1925050503d80600081146114b9576040519150601f19603f3d011682016040523d82523d6000602084013e6114be565b606091505b505090508061150f5760405162461bcd60e51b815260206004820152601360248201527f4661696c656420647261696e696e6720455448000000000000000000000000006044820152606401610843565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611576573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159a91906124bf565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018390529192507f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af115801561160e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163291906124d8565b61167e5760405162461bcd60e51b815260206004820152601360248201527f4661696c656420647261696e696e6720444149000000000000000000000000006044820152606401610843565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156116e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170991906124bf565b60405163a9059cbb60e01b81526001600160a01b038681166004830152602482018390529192507f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af115801561177d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a191906124d8565b6117ed5760405162461bcd60e51b815260206004820152601460248201527f4661696c6564206472697070696e6720774554480000000000000000000000006044820152606401610843565b6040516001600160a01b038516907f7c8fc2d32492ea30dc289f81f32ebd6e1bcb12644f56039a3a274a924decc4a190600090a250505050565b6000818152600260205260409020546001600160a01b031661188b5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610843565b50565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03841690811790915581906118d082610b83565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061191583610b83565b9050806001600160a01b0316846001600160a01b0316148061195c57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806119805750836001600160a01b03166119758461078c565b6001600160a01b0316145b949350505050565b826001600160a01b031661199b82610b83565b6001600160a01b031614611a175760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610843565b6001600160a01b038216611a925760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610843565b611a9f8383836001611ec8565b826001600160a01b0316611ab282610b83565b6001600160a01b031614611b2e5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610843565b6000818152600460209081526040808320805473ffffffffffffffffffffffffffffffffffffffff199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216611c215760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610843565b6000818152600260205260409020546001600160a01b031615611c865760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610843565b611c94600083836001611ec8565b6000818152600260205260409020546001600160a01b031615611cf95760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610843565b6001600160a01b0382166000818152600360209081526040808320805460010190558483526002909152808220805473ffffffffffffffffffffffffffffffffffffffff19168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b816001600160a01b0316836001600160a01b031603611dd25760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610843565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611e4a848484611988565b611e5684848484611f50565b6112315760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610843565b6001811115611231576001600160a01b03841615611f0e576001600160a01b03841660009081526003602052604081208054839290611f08908490612630565b90915550505b6001600160a01b03831615611231576001600160a01b03831660009081526003602052604081208054839290611f459084906124f5565b909155505050505050565b60006001600160a01b0384163b156120e6576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290611fad903390899088908890600401612643565b6020604051808303816000875af1925050508015611fe8575060408051601f3d908101601f19168201909252611fe59181019061267f565b60015b61209b573d808015612016576040519150601f19603f3d011682016040523d82523d6000602084013e61201b565b606091505b5080516000036120935760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610843565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050611980565b506001949350505050565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461188b57600080fd5b60006020828403121561213157600080fd5b813561213c816120f1565b9392505050565b6000815180845260005b818110156121695760208185018101518683018201520161214d565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061213c6020830184612143565b6000602082840312156121ae57600080fd5b5035919050565b80356001600160a01b03811681146121cc57600080fd5b919050565b600080604083850312156121e457600080fd5b6121ed836121b5565b946020939093013593505050565b60008060006060848603121561221057600080fd5b612219846121b5565b9250612227602085016121b5565b9150604084013590509250925092565b60006020828403121561224957600080fd5b61213c826121b5565b801515811461188b57600080fd5b6000806040838503121561227357600080fd5b61227c836121b5565b9150602083013561228c81612252565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156122c8576122c8612297565b604051601f8501601f19908116603f011681019082821181831017156122f0576122f0612297565b8160405280935085815286868601111561230957600080fd5b858560208301376000602087830101525050509392505050565b60006020828403121561233557600080fd5b813567ffffffffffffffff81111561234c57600080fd5b8201601f8101841361235d57600080fd5b611980848235602084016122ad565b6000806000806080858703121561238257600080fd5b5050823594602084013594506040840135936060013592509050565b600080600080608085870312156123b457600080fd5b6123bd856121b5565b93506123cb602086016121b5565b925060408501359150606085013567ffffffffffffffff8111156123ee57600080fd5b8501601f810187136123ff57600080fd5b61240e878235602084016122ad565b91505092959194509250565b6000806040838503121561242d57600080fd5b612436836121b5565b9150612444602084016121b5565b90509250929050565b600181811c9082168061246157607f821691505b60208210810361248157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000826124ba57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156124d157600080fd5b5051919050565b6000602082840312156124ea57600080fd5b815161213c81612252565b808201808211156106f4576106f4612487565b6000600019820361251b5761251b612487565b5060010190565b601f82111561090257600081815260208120601f850160051c810160208610156125495750805b601f850160051c820191505b8181101561256857828155600101612555565b505050505050565b815167ffffffffffffffff81111561258a5761258a612297565b61259e81612598845461244d565b84612522565b602080601f8311600181146125d357600084156125bb5750858301515b600019600386901b1c1916600185901b178555612568565b600085815260208120601f198616915b82811015612602578886015182559484019460019091019084016125e3565b50858210156126205787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b818103818111156106f4576106f4612487565b60006001600160a01b038087168352808616602084015250836040830152608060608301526126756080830184612143565b9695505050505050565b60006020828403121561269157600080fd5b815161213c816120f156fea264697066735822122019239e1dfe70d9c2a94a255c44b0553220fdf344a7b45b058498cb756300228964736f6c63430008110033",
  "devdoc": {
    "author": "Anish Agnihotri",
    "events": {
      "FaucetDrained(address)": {
        "params": {
          "recipient": "address drained to"
        }
      },
      "FaucetDripped(address)": {
        "params": {
          "recipient": "address dripped to"
        }
      },
      "OperatorUpdated(address,bool)": {
        "params": {
          "operator": "address being updated",
          "status": "new operator status"
        }
      },
      "SuperOperatorUpdated(address,bool)": {
        "params": {
          "operator": "address being updated",
          "status": "new operator status"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "availableDrips()": {
        "returns": {
          "daiDrips": "— available DAI drips",
          "ethDrips": "— available Ether drips",
          "wethDrips": "— available wETH drips"
        }
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "params": {
          "_DAI": "address of DAI contract",
          "_URI": "string of token URI",
          "_WETH": "address of wETH contract"
        }
      },
      "drain(address)": {
        "params": {
          "_recipient": "to send drained tokens to"
        }
      },
      "drip(address)": {
        "params": {
          "_recipient": "to drip tokens to"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "of ERC721 NFT"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "updateApprovedOperator(address,bool)": {
        "params": {
          "_operator": "address to update",
          "_status": "of operator to toggle (true == allowed to drip)"
        }
      },
      "updateDripAmounts(uint256,uint256,uint256,uint256)": {
        "params": {
          "_daiAmount": "DAI to drip",
          "_ethAmount": "ETH to drip",
          "_nftCount": "number of NFTs to mint per drip",
          "_wethAmount": "wETH to drip"
        }
      },
      "updateSuperOperator(address,bool)": {
        "params": {
          "_operator": "address to update",
          "_status": "of operator to toggle (true === is super operator)"
        }
      },
      "updateTokenURI(string)": {
        "params": {
          "_URI": "of collection"
        }
      }
    },
    "title": "MultiFaucet",
    "version": 1
  },
  "userdoc": {
    "events": {
      "FaucetDrained(address)": {
        "notice": "Emitted after faucet drained to a recipient"
      },
      "FaucetDripped(address)": {
        "notice": "Emitted after faucet drips to a recipient"
      },
      "OperatorUpdated(address,bool)": {
        "notice": "Emitted after operator status is updated"
      },
      "SuperOperatorUpdated(address,bool)": {
        "notice": "Emitted after super operator is updated"
      }
    },
    "kind": "user",
    "methods": {
      "DAI()": {
        "notice": "DAI ERC20 token"
      },
      "DAI_AMOUNT()": {
        "notice": "DAI to disperse"
      },
      "ETH_AMOUNT()": {
        "notice": "ETH to disperse"
      },
      "NFT_COUNT()": {
        "notice": "Number of ERC721 NFTs to mint"
      },
      "URI()": {
        "notice": "Default NFT uri"
      },
      "WETH()": {
        "notice": "wETH ERC20 token"
      },
      "WETH_AMOUNT()": {
        "notice": "wETH to disperse"
      },
      "approvedOperators(address)": {
        "notice": "Addresses of approved operators"
      },
      "availableDrips()": {
        "notice": "Returns number of available drips by token"
      },
      "constructor": {
        "notice": "Creates a new MultiFaucet contract"
      },
      "drain(address)": {
        "notice": "Allows super operator to drain contract of tokens"
      },
      "drip(address)": {
        "notice": "Drips and mints tokens to recipient"
      },
      "nftsMinted()": {
        "notice": "Count of minted NFTs"
      },
      "superOperators(address)": {
        "notice": "Addresses of super operators"
      },
      "tokenURI(uint256)": {
        "notice": "Override internal ERC721 function to return single image per NFT"
      },
      "updateApprovedOperator(address,bool)": {
        "notice": "Allows super operator to update approved drip operator status"
      },
      "updateDripAmounts(uint256,uint256,uint256,uint256)": {
        "notice": "Allows super operator to update drip amounts"
      },
      "updateSuperOperator(address,bool)": {
        "notice": "Allows super operator to update super operator"
      },
      "updateTokenURI(string)": {
        "notice": "Allows super operator to update NFT uri"
      }
    },
    "notice": "Drips ETH, DAI, wETH, and mints NFTs",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/MultiFaucet.sol:MultiFaucet",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/MultiFaucet.sol:MultiFaucet",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/MultiFaucet.sol:MultiFaucet",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/MultiFaucet.sol:MultiFaucet",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/MultiFaucet.sol:MultiFaucet",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/MultiFaucet.sol:MultiFaucet",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2551,
        "contract": "contracts/MultiFaucet.sol:MultiFaucet",
        "label": "URI",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 2554,
        "contract": "contracts/MultiFaucet.sol:MultiFaucet",
        "label": "nftsMinted",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2558,
        "contract": "contracts/MultiFaucet.sol:MultiFaucet",
        "label": "NFT_COUNT",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2562,
        "contract": "contracts/MultiFaucet.sol:MultiFaucet",
        "label": "ETH_AMOUNT",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2566,
        "contract": "contracts/MultiFaucet.sol:MultiFaucet",
        "label": "DAI_AMOUNT",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2570,
        "contract": "contracts/MultiFaucet.sol:MultiFaucet",
        "label": "WETH_AMOUNT",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2575,
        "contract": "contracts/MultiFaucet.sol:MultiFaucet",
        "label": "approvedOperators",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2580,
        "contract": "contracts/MultiFaucet.sol:MultiFaucet",
        "label": "superOperators",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}